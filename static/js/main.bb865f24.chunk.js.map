{"version":3,"sources":["components/ButtonAppBar.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","marginBottom","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","paper","padding","textAlign","color","palette","text","secondary","responsive_image","width","height","App","useState","images","setImages","visibleImages","setVisibleImages","isLoading","setIsLoading","groupByAlbumId","acc","val","albumId","push","useEffect","a","axios","album","result","data","filter","img","albums","reduce","imgs","fetchData","Container","maxWidth","Grid","container","slice","map","item","xs","sm","md","lg","xl","Paper","id","src","url","alt","Button","onClick","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,aAAc,IAEhBC,WAAY,CACVC,YAAaL,EAAMM,QAAQ,IAE7BC,MAAO,CACLL,SAAU,OAIC,SAASM,IACtB,IAAMC,EAAUX,IAEhB,OACE,qBAAKY,UAAWD,EAAQR,KAAxB,SACE,cAACU,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UAEE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,MAA5C,uC,YCfJT,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZc,MAAO,CACLC,QAASjB,EAAMM,QAAQ,GACvBY,UAAW,SACXC,MAAOnB,EAAMoB,QAAQC,KAAKC,WAE5BC,iBAAkB,CAChBC,MAAO,OACPC,OAAQ,YAsFGC,MAlFf,WAEE,IAAMjB,EAAUX,IAFH,EAKe6B,mBAAS,IALxB,mBAKNC,EALM,KAKEC,EALF,OAM6BF,mBAAS,IANtC,mBAMNG,EANM,KAMSC,EANT,OAOqBJ,oBAAS,GAP9B,mBAONK,EAPM,KAOKC,EAPL,KAUPC,EAAiB,SAACC,EAAKC,GAO3B,OALKD,EAAIC,EAAIC,WACXF,EAAIC,EAAIC,SAAW,IAGrBF,EAAIC,EAAIC,SAASC,KAAKF,GACfD,GA+BT,OA3BAI,qBAAU,YAEO,uCAAG,oCAAAC,EAAA,sEACKC,IACnB,+CAFc,OAQhB,IAAWC,KAPLC,EADU,OAIVf,EAASe,EAAOC,KAAKC,QAAO,SAAAC,GAAG,OAAIA,EAAIT,QAAU,IAAM,KACvDU,EAASnB,EAAOoB,OAAOd,EAAgB,IACvCe,EAAO,GAEOF,EAClBE,EAAKX,KAAKS,EAAOL,GAAO,IAI1Bb,EAAUoB,GACVhB,GAAa,GAdG,2CAAH,qDAiBfiB,KACC,IAQD,sBAAKxC,UAAWD,EAAQR,KAAxB,UACE,cAACO,EAAD,IACD,cAAC2C,EAAA,EAAD,CAAWC,SAAS,KAApB,SAED,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAChD,QAAS,EAAzB,UAEO0B,GAAa,qDACbJ,EAAO2B,MAAM,EAAGzB,GAAe0B,KAAI,SAAAV,GAAG,OAC7B,cAACO,EAAA,EAAD,CAAOI,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA9C,SACE,eAACC,EAAA,EAAD,CAAOrD,UAAWD,EAAQO,MAA1B,uBACW8B,EAAIT,QADf,iBACsCS,EAAIkB,GACtC,qBAAKC,IAAKnB,EAAIoB,IAAKxD,UAAWD,EAAQc,iBAAkB4C,IAAKrB,EAAIvC,YAHjBuC,EAAIkB,OASrElC,EAAgB,KAAOE,GACxB,cAACqB,EAAA,EAAD,CAAMI,MAAI,EAACE,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACE,cAACM,EAAA,EAAD,CAAQrD,QAAQ,YAAYI,MAAM,UAClCkD,QAzBW,WACftC,GAAiB,SAAAuC,GAAI,OAAIA,EAAO,OAuB5B,kCCpFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb865f24.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginBottom: 15,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          \n          <Typography variant=\"h6\" className={classes.title}>\n            Tilllate Internship\n          </Typography>\n         \n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","// import logo from './logo.svg';\n// import './App.css';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport Container from '@material-ui/core/Container';\n\nimport ButtonAppBar from './components/ButtonAppBar';\nimport Button from '@material-ui/core/Button'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  responsive_image: {\n    width: \"100%\",\n    height: \"auto\",\n  },\n}));\n\nfunction App() {\n \n  const classes = useStyles();\n\n  //states\n  const [images, setImages] = useState([]); // the final imgs list that follow all requirements!\n  const [visibleImages, setVisibleImages] = useState(10); // how many imgs to show\n  const [isLoading, setIsLoading] = useState(true); //loading state \n\n// custom reducer for grouping images based on their albumId:\n  const groupByAlbumId = (acc, val)=>{\n    // Group initialization\n    if (!acc[val.albumId]) {\n      acc[val.albumId] = [];\n    }\n    //Grouping\n    acc[val.albumId].push(val);\n    return acc;\n  }\n\n//component did mount:\n  useEffect(() => {\n    //axios fetch api\n    const fetchData = async () => {\n      const result = await axios(\n        'https://jsonplaceholder.typicode.com/photos',\n      );\n      const images = result.data.filter(img => img.albumId % 2 === 0); //reciving the result & filtring it to get imgs with even albumId only\n      const albums = images.reduce(groupByAlbumId, {}) //grouping that belong to the same album (share the same albumId value) into an object using my custom reducer\n      const imgs = [] // initialize imgs var to recive the 1st img from each album (used later to initialize images state)\n     \n      for (const album in albums) { //looping let i around albums, taking the 1st img, assign it to imgs\n        imgs.push(albums[album][0]);\n      }\n      \n      //reset images_list to render it, and loading state\n      setImages(imgs)\n      setIsLoading(false);\n    };\n \n    fetchData();\n  }, []);\n\n  // show more 10 imgs\n  const onloadMore = () => {\n      setVisibleImages(prev => prev + 10)\n  }\n\n  return (\n    <div className={classes.root}>\n      <ButtonAppBar />\n     <Container maxWidth=\"lg\">\n\n    <Grid container spacing={3}>\n\n          {isLoading && <h1>loading images ...!</h1>}\n          {images.slice(0, visibleImages).map(img => (\n                    <Grid  item xs={12} sm={12} md={6} lg={4} xl={4} key={img.id}>\n                      <Paper className={classes.paper}>\n                      albumId : {img.albumId} || imageId : {img.id} \n                          <img src={img.url} className={classes.responsive_image} alt={img.title}/>\n                      </Paper>\n                    </Grid>\n          ))}\n\n        {/* render the button only if the visible img are less than 50, and isLoading === false */}\n        {visibleImages < 50 && !isLoading && (\n        <Grid item sm={12} md={12} lg={12} xl={12}>\n          <Button variant=\"contained\" color=\"primary\"\n          onClick={onloadMore}\n          >\n             Show more\n             </Button>\n        </Grid>\n        )}\n\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}